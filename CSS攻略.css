	body{

	background:#333;

	}

	h1 {

	text-align:center;

	color:#fff;

	font-size:48px;

	font-family: 'Fruktur', cursive;

	text-shadow: 1px 1px 1px #ccc,
	0 0 10px #fff,

	0 0 20px #fff,

	0 0 30px #fff,

	0 0 40px #ff00de,

	0 0 70px #ff00de,

	0 0 80px #ff00de,

	0 0 100px #ff00de,

	0 0 150px #ff00de;
	/*文本阴影：
	h-shadow	必需。水平阴影的位置。允许负值。
	v-shadow	必需。垂直阴影的位置。允许负值。
	blur	可选。模糊的距离。
	color	可选。阴影的颜色。参阅 CSS 颜色值。	
	*/

	transform-style: preserve-3d;
	-webkit-transform-style: preserve-3d;
	-moz-transform-style: preserve-3d;
	-ms-transform-style: preserve-3d;			 
	-o-transform-style: preserve-3d;	
	/*transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。
	preserve-3d	子元素将保留其 3D 位置。*/


	animation: run ease-in-out 9s infinite;
	-webkit-animation: run ease-in-out 9s infinite;	
	-moz-animation: run ease-in-out 9s infinite ;	
	-ms-animation: run ease-in-out 9s infinite;	
	-o-animation: run ease-in-out 9s infinite;	
	}

	/*linear	规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。(匀速)
	ease	规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）（相对于匀速，中间快，两头慢）。
	ease-in	规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）（相对于匀速，开始的时候慢，之后快）。
	ease-out	规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）（相对于匀速，开始时快，结束时候间慢，）。
	ease-in-out	规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）（相对于匀速，（开始和结束都慢）两头慢）。
	cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。    
	infinite无限的*/ 

	/*animation 属性是一个简写属性，用于设置六个动画属性：
	animation-name	规定需要绑定到选择器的 keyframe 名称。
	animation-duration	规定完成动画所花费的时间，以秒或毫秒计。
	animation-timing-function	规定动画的速度曲线。
	animation-delay	规定在动画开始之前的延迟。
	animation-iteration-count	规定动画应该播放的次数。
	animation-direction	规定是否应该轮流反向播放动画。*/

	@keyframes run {

	0% {
	transform:rotateX(-5deg) rotateY(0) ;
	/*rotateX(angle)	定义沿着 X 轴的 3D 旋转。*/
	}

	50% {

	transform:rotateX(0) rotateY(180) ;
	text-shadow: 1px 1px 1px #ccc,

	0 0 10px #fff,

	0 0 20px #fff,

	0 0 30px #fff,

	0 0 40px #3EFF3E,

	0 0 70px #3EFFff,

	0 0 80px #3EFFff,

	0 0 100px #3EFFee,

	0 0 150px #3EFFee;
	}	

	100% {
	transform:rotateX(5deg) rotateY(360deg);	
	}
	}
	@-moz-keyframes run{
	0% {
	-moz-transform:rotateX(-5deg) rotateY(0) ;
	/*rotateX(angle)	定义沿着 X 轴的 3D 旋转。*/
	}

	50% {

	-moz-transform:rotateX(0) rotateY(180) ;
	text-shadow: 1px 1px 1px #ccc,

	0 0 10px #fff,

	0 0 20px #fff,

	0 0 30px #fff,

	0 0 40px #3EFF3E,

	0 0 70px #3EFFff,

	0 0 80px #3EFFff,

	0 0 100px #3EFFee,

	0 0 150px #3EFFee;
	}	

	100% {
	-moz-transform:rotateX(5deg) rotateY(360deg);	
	}
	}
	@-webkit-keyframes run{
	0% {
	-webkit-transform:rotateX(-5deg) rotateY(0) ;
	/*rotateX(angle)	定义沿着 X 轴的 3D 旋转。*/
	}

	50% {

	-webkit-transform:rotateX(0) rotateY(180) ;
	text-shadow: 1px 1px 1px #ccc,

	0 0 10px #fff,

	0 0 20px #fff,

	0 0 30px #fff,

	0 0 40px #3EFF3E,

	0 0 70px #3EFFff,

	0 0 80px #3EFFff,

	0 0 100px #3EFFee,

	0 0 150px #3EFFee;
	}	

	100% {
	-webkit-transform:rotateX(5deg) rotateY(360deg);	
	}
	}
	@-ms-keyframes run{
	0% {
	-ms-transform:rotateX(-5deg) rotateY(0) ;
	/*rotateX(angle)	定义沿着 X 轴的 3D 旋转。*/
	}

	50% {

	-ms-transform:rotateX(0) rotateY(180) ;

	}	

	100% {
	-ms-transform:rotateX(5deg) rotateY(360deg);	
	}
	}

	/*-----------------------------------------------------------------案例分割线【1-2动画案例】---------------------------------------------------------*/
	/*色彩CSS3支持
	【HSL】（H: Hue 色相 ，S：Saturation 饱和度， L ：Lightness 明度）、
	【CMYK】 （C：Cyan = 青色，又称为‘天蓝色’或是‘湛蓝’M：Magenta = 品红色，又称为‘洋红色’；Y：Yellow = 黄色；K：Key Plate(blacK) = 定位套版色（黑色））、
	【HSLA】 （H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360。S：Saturation(饱和度)。取值为：0.0% - 100.0%。L：Lightness(亮度)。取值为：0.0% - 100.0%。A：Alpha透明度。取值0~1之间。）、
	【RGBA】 （R：红色值。正整数 | 百分数。G：绿色值。正整数 | 百分数。B：蓝色值。正整数 | 百分数。A：Alpha透明度。取值0~1之间。）
	渐变效果（IE中滤镜也可以实现）
	个性化字体（使用@Font-Face轻松定制字体）
	多背景图 （一个元素上添加多层背景图片）
	边框背景图 （边框应用背景图片）
	变形处理 （对HTML元素进行旋转、缩放、倾斜、移动等实现强大动画）
	多栏布局 （浏览器解释这个属性并生成多栏）
	媒体查询 （针对不同屏幕分辨率，应用不同样式）*/

	#stage{

	-moz-perspective:500; 
	-webkit-perspective:500; 
	-ms-perspective:500; 
	/*当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。
	注释：perspective 属性只影响 3D 转换元素。
	number	元素距离视图的距离，以像素计。*/

	-moz-perspective-origin:0% 0%; 
	-webkit-perspective-origin:0% 0%;
	/*perspective-origin 属性定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置。
	当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身。 */

	}

	#doraemon{

	position:absolute;

	left:50px;

	top:50px;

	width:400px;

	-webkit-transform-style: preserve-3d;

	-moz-transform-style: preserve-3d;

	transform-style: preserve-3d;

	-webkit-transform: rotateX(0) rotateY(0) rotateZ(0);

	-moz-transform: rotateX(0) rotateY(0) rotateZ(0);

	transform: rotateX(0) rotateY(0) rotateZ(0);

	-webkit-animation: run1 5s infinite linear;

	-moz-animation: run1 5s infinite linear;

	animation: run1 5s infinite linear;

	}	
	@-webkit-keyframes run1 {

	0% { -webkit-transform:rotateX(0) rotateY(0) rotatez(0) ;}

	25% { -webkit-transform:rotateX(30deg) rotateY(30deg) rotatez(30deg) ; }

	50% { -webkit-transform:rotateX(0deg) rotateY(0deg) rotatez(0) ; }

	75% { -webkit-transform:rotateX(-30deg) rotateY(-30deg) rotatez(-30deg) ; }

	100% { -webkit-transform:rotateX(0deg) rotateY(0) rotatez(0) ; }



	}

	@-moz-keyframes run1 {

	0% { -moz-transform:rotateX(0) rotateY(0) rotatez(0) ;}

	25% { -moz-transform:rotateX(30deg) rotateY(30deg) rotatez(30deg) ; }

	50% { -moz-transform:rotateX(0deg) rotateY(0deg) rotatez(0) ; }

	75% { -moz-transform:rotateX(-30deg) rotateY(-30deg) rotatez(-30deg) ; }

	100% { -moz-transform:rotateX(0deg) rotateY(0) rotatez(0) ; }

	}

	@-ms-keyframes run1 {

	0% { -ms-transform:rotateX(0) rotateY(0) rotatez(0) ;}

	25% { -ms-transform:rotateX(30deg) rotateY(30deg) rotatez(30deg) ; }

	50% { -ms-transform:rotateX(0deg) rotateY(0deg) rotatez(0) ; }

	75% { -ms-transform:rotateX(-30deg) rotateY(-30deg) rotatez(-30deg) ; }

	100% { -ms-transform:rotateX(0deg) rotateY(0) rotatez(0) ; }

	}
	#instr{
	float:right;
	width:400px;
	font-size:14px;
	border-left:200px dotted black;
	padding-left:20px;
	}

	#head_light{
	width:50px;
	height:50px;
	transform: rotate(20deg);
	-webkit-transform: rotate(20deg);
	-moz-transform: rotate(20deg);
	-o-transform: rotate(20deg);
	box-shadow:80px 20px 50px #fff;
	-webkit-box-shadow:80px 20px 55px #fff;
	-moz-box-shadow:80px 20px 50px #fff;
	border-radius:45px;
	-webkit-border-radius:45px;
	-moz-border-radius:60px;
	position:absolute;
	top:-20px;
	left:170px;
	opacity:0.5
	}

	#face{
	position:relative;
	width:310px;
	height:300px;
	border-radius:146px;
	-webkit-border-radius:146px;
	-moz-border-radius:146px;
	/* border-radius:向 div 元素添加圆角边框*/

	background:#07beea;	
	background: -webkit-gradient(linear, right top, left bottom, from(#fff) ,color-stop(0.20, #07beea), color-stop(0.73, #10a6ce),color-stop(0.95, #000), to(#444));	
	background: -moz-linear-gradient(right top, #fff,#07beea 20%, #10a6ce 73% ,#000 95% ,#000 155%); 
	background-image: linear-gradient(to left bottom,#fff 0%,#07beea 20%, #10a6ce 73% ,#000 95% ,#000 155%);
	/*linear-gradient:渐变在一个拥有尺寸的盒子中被生成，被称之为渐变盒，但是渐变本身并没有内在的尺寸，也就说如果在一个没有尺寸的容器上定义渐变，将无法被呈现。
	<gradient> 可以应用在所有接受图像的属性上
	<color-stop>：指定渐变的起止颜色。<color>：指定颜色。<length>：用长度值指定起止色位置，不允许负值。<percentage>：用百分比指定起止色位置。*/

	border:#333 2px solid;
	top:-15px;
	box-shadow:-5px 10px 15px rgba(0,0,0,0.45);
	-webkit-box-shadow:-5px 10px 15px rgba(0,0,0,0.45);
	-moz-box-shadow:-5px 10px 15px rgba(0,0,0,0.45);

	}
	#base{
	position:relative;
	top:-5px;
	/*top:正号下移，负号上移*/
	}

	#base_white{
	position:absolute;
	border:#000 2px solid;
	width:264px;
	height:196px;
	border-radius: 150px 150px;
	-webkit-border-radius: 150px 150px;
	-moz-border-radius: 150px 150px;
	/*border-radius是一种缩写方法。如果“/”前后的值都存在，那么“/”前面的值设置其水平半径，“/”后面值设置其垂直半径。
	border-radius: 1-4 length|% / 1-4 length|%;
	注释：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。*/

	background:#FFF;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.75,#fff),color-stop(0.83,#eee),color-stop(0.90,#999),color-stop(0.95,#444), to(#000));	
	background: -moz-linear-gradient(right top, #fff,#fff 75%, #eee 83%,#999 90%,#444 95%, #000);
	z-index:1;
	/*z-index 属性设置元素的堆叠顺序。Z-index 仅能在定位元素上奏效（例如 position:absolute;）*/
	top:85px;
	left:22px;	
	/*left:正号右移，负号左移*/
	}
	#eyes{
	position:relative;
	top:-5px;
	}
	div.eye{
	position:absolute;
	border-radius: 35px 35px;
	-webkit-border-radius: 35px 35px;
	-moz-border-radius: 35px 35px;
	border:2px solid #000;
	width:72px;
	height:83px;
	z-index:20;
	background:#fff;
	}
	div.black_eye{
	position:absolute;
	width:15px;
	height:15px;
	border-radius:10px;
	-webkit-border-radius:10px;
	-moz-border-radius:10px;
	background:#333;
	z-index:21;
	-webkit-animation:cate 1s infinite linear;

	}
	@-webkit-keyframes cate{
	0%{
	margin:0 0 0 0;
	}
	80%	{
	margin:0px 0 0 0;
	}
	85%	{
	margin:-20px 0 0 0;
	}
	90%{
	margin:0 0 0 0;
	}
	93%{
	margin:0 0 0 7px;
	}
	96%{
	margin:0 0 0 10px;
	}
	100%{
	margin:0 0 0 4px;
	}
	}

	@-moz-keyframes cate{
	0%{
	margin:0 0 0 0;
	}
	80%	{
	margin:0px 0 0 0;
	}
	85%	{
	margin:-20px 0 0 0;
	}
	90%{
	margin:0 0 0 0;
	}
	93%{
	margin:0 0 0 7px;
	}
	96%{
	margin:0 0 0 10px;
	}
	100%{
	margin:0 0 0 4px;
	}
	}

	@-ms-keyframes cate{
	0%{
	margin:0 0 0 0;
	}
	80%	{
	margin:0px 0 0 0;
	}
	85%	{
	margin:-20px 0 0 0;
	}
	90%{
	margin:0 0 0 0;
	}
	93%{
	margin:0 0 0 7px;
	}
	96%{
	margin:0 0 0 10px;
	}
	100%{
	margin:0 0 0 4px;
	}
	}

	div.black_left{
	top:100px;
	left:130px;
	}
	div.black_right{
	top:100px;
	left:170px;
	}
	div.eye_left{
	top:45px;
	left:82px;
	}
	div.eye_right{
	top:45px;
	left:156px;
	}
	#nose{
	width:32px;
	height:32px;
	border:2px solid #000;
	border-radius:50px;
	-webkit-border-radius:50px;
	-moz-border-radius:50px;
	background:#c93e00;
	position:absolute;
	top:117px;
	left:139px;
	z-index:30;
	}
	#nose_light{
	width:10px;
	height:10px;
	border-radius:5px;
	-webkit-border-radius:5px;
	-moz-border-radius:5px;
	position:relative;
	box-shadow:19px 8px 5px #fff;
	-webkit-box-shadow:19px 8px 5px #fff;
	-moz-box-shadow:19px 8px 5px #fff;
	top:0px;
	left:0px;
	}
	/*#nose_line{
	background:#000;
	width:4px;
	height:100px;
	top:125px;
	left:156px;
	position:absolute;

	}*/

	#nose_line{
	background:#333;
	width:3px;
	height:100px;
	top:140px;
	left:155px;
	position:absolute;
	z-index:20;
	}
	#mouth{
	width:240px;
	height:500px;
	border-bottom:3px solid #333;
	border-radius:120px;
	-webkit-border-radius:120px;
	-moz-border-radius:120px;
	position:absolute;
	top:-263px;
	left:36px;
	z-index:10;
	}

	#mouth_rewrite{
	background:#fff;
	width:240px;
	height:90px;
	position:relative;
	top:115px;
	left:35px;
	z-index:12;
	border-radius:45px;
	-webkit-border-radius:45px;
	-moz-border-radius:60px;
	}

	/*#firefox_mouth, x:-moz-broken, x:last-of-type, x:indeterminate {
	position:relative;
	width:170px;
	height:150px;
	-moz-border-radius:85px;
	z-index:11;
	top:-3px;
	left:70px;
	}*/
	/*:last-of-type 选择器匹配属于其父元素的特定类型的最后一个子元素的每个元素。
	:indeterminate CSS 伪类 表示状态不确定的表单元素。
	*/

	.whiskers{
	background:#333;
	height:2px;
	width:60px;
	position:absolute;
	z-index:20;
	}
	.whi_right{
	top:165px;
	left:210px;	
	}	

	.whi_right_top{
	top:145px;
	left:210px;
	}	

	.whi_right_bottom{
	top:185px;
	left:210px;
	}	

	.whi_left{
	top:165px;
	left:50px;	
	}	
	.whi_left_top{
	top:145px;
	left:50px;
	}	

	.whi_left_bottom{
	top:185px;
	left:50px;
	}
	.rotate20{
	transform: rotate(20deg);
	-webkit-transform: rotate(20deg);
	-moz-transform: rotate(20deg);
	-o-transform: rotate(20deg);	
	}

	.rotate160{
	transform: rotate(160deg);
	-webkit-transform: rotate(160deg);
	-moz-transform: rotate(160deg);
	-o-transform: rotate(160deg);	
	}
	#choker{
	position:relative;
	top:-55px;
	left:35px;
	z-index:100;
	}
	#belt{
	width:230px;
	height:20px;
	border:#000 solid 2px;
	background:#ca4100;
	background: -webkit-gradient(linear, left top, left bottom, from(#ca4100), to(#800400));	
	background: -moz-linear-gradient(top, #ca4100, #800400); 
	border-radius:10px;	
	-webkit-border-radius:10px;	
	-moz-border-radius:10px;
	position:relative;
	left:5px;
	}

	#bell{
	width:40px;
	height:40px;
	border-radius:50px;
	-webkit-border-radius:50px;
	-moz-border-radius:50px;
	border:2px solid #000;
	background:#f9f12a;
	background: -webkit-gradient(linear, left top, left bottom, from(#f9f12a),color-stop(0.5, #e9e11a), to(#a9a100));	
	background: -moz-linear-gradient(top, #f9f12a, #e9e11a 75%,#a9a100); 
	box-shadow:-5px 5px 10px rgba(0,0,0,0.25);
	-webkit-box-shadow:-5px 3px 5px rgba(0,0,0,0.25);
	-moz-box-shadow:-5px 5px 10px rgba(0,0,0,0.25);
	position:relative;
	top:-15px;
	left:100px;
	}

	#bell_line{
	width:36px;
	height:2px;
	background:#f9f12a;
	border:#333 solid 2px;
	position:relative;
	top:10px;
	}

	#bell_circle{
	width:12px;
	height:10px;
	border-radius:5px;
	-webkit-border-radius:5px;
	-moz-border-radius:5px;
	background:#000;
	position:relative;
	top:14px;
	left:14px;
	}

	#bell_under{
	width:3px;
	height:15px;
	background:#000;
	position:relative;
	top:10px;
	left:18px;
	}

	#bell_light{
	width:10px;
	height:10px;
	border-radius:10px;
	-webkit-border-radius:10px;
	-moz-border-radius:10px;
	box-shadow:19px 8px 5px #fff;
	-webkit-box-shadow:19px 8px 5px #fff;
	-moz-box-shadow:19px 8px 5px #fff;
	position:relative;
	opacity:0.7;
	top:-35px;
	left:5px;
	}
	#doutai{
	position:absolute;
	width:220px;
	height:165px;
	background:#07beea;
	background: -webkit-gradient(linear, right top, left top, from(#07beea),color-stop(0.5, #0073b3),color-stop(0.75,#00b0e0), to(#0096be));	
	background: -moz-linear-gradient(right, #07beea, #0073b3 50%,#0096be 75%,#00b0e0 ,#0096be 100% ,#333 114%); 
	border:#333 2px solid;
	top:262px;
	left:46px;
	}
	div.base_white2{
	position:absolute;
	width:170px;
	height:170px;
	border-radius:85px;
	-webkit-border-radius:85px;
	-moz-border-radius:85px;
	border:2px solid #000;
	background:#FFF;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.75,#fff),color-stop(0.83,#eee),color-stop(0.90,#999),color-stop(0.95,#444), to(#000));	
	background: -moz-linear-gradient(right top, #fff,#fff 75%, #eee 83%,#999 90%,#444 95%, #000); 
	}

	.doutai_center{
	top:230px;
	left:72px;
	}

	#circle{
	position:relative;
	width:130px;
	height:130px;
	border-radius:65px;
	-webkit-border-radius:65px;
	-moz-border-radius:65px;
	background:#fff;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.70,#fff),color-stop(0.75,#f8f8f8),color-stop(0.80,#eee),color-stop(0.88,#ddd), to(#fff));	
	background: -moz-linear-gradient(right top, #fff, #fff 70%,#f8f8f8 75%,#eee 80%,#ddd 88% , #fff); 
	border:2px solid #000;
	top:-120px;
	left:92px;
	}
	#circle_rewrite{
	position:relative;
	width:134px;
	height:60px;
	background:#fff;	
	border-bottom:2px solid #000;
	top:-250px;
	left:92px;
	}
	#hand_right{
	position:absolute;
	top:272px;
	left:248px;
	width:100px;
	height:100px;
	}
	#arm_right{
	position:relative;
	width:80px;
	height:50px;
	background:#07beea;
	background: -webkit-gradient(linear, left top, left bottom, from(#07beea),color-stop(0.85,#07beea), to(#555));	
	background: -moz-linear-gradient(top, #07beea, #07beea 85%, #555); 

	border:solid 1px #000;
	z-index:-1;
	top:17px;
	transform: rotate(35deg);
	-webkit-transform: rotate(35deg);
	-moz-transform: rotate(35deg);
	-o-transform: rotate(35deg);
	box-shadow:-10px 7px 10px rgba(0,0,0,0.35);
	-webkit-box-shadow:-10px 7px 10px rgba(0,0,0,0.35);
	-moz-box-shadow:-10px 7px 10px rgba(0,0,0,0.35);
	}


	#hand_left{
	position:absolute;
	top:272px;
	left:-46px;
	width:100px;
	height:100px;
	}

	#arm_left{
	position:relative;
	width:80px;
	height:50px;
	background:#0096be;
	border:solid 1px #000;
	z-index:-1;
	top:17px;
	left:36px;
	transform: rotate(145deg);
	-webkit-transform: rotate(145deg);
	-moz-transform: rotate(145deg);
	-o-transform: rotate(145deg);
	box-shadow:5px -7px 10px rgba(0,0,0,0.25);
	-webkit-box-shadow:5px -7px 10px rgba(0,0,0,0.25);
	-moz-box-shadow:5px -7px 10px rgba(0,0,0,0.25);
	}
	div.hand_circle{
	position:absolute;
	width:60px;
	height:60px;
	border-radius:30px;
	-webkit-border-radius:30px;
	-moz-border-radius:30px;
	border:2px solid #000;
	background:#fff;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.5,#fff),color-stop(0.70,#eee),color-stop(0.8,#ddd), to(#999));	
	background: -moz-linear-gradient(right top, #fff, #fff 50%, #eee 70%, #ddd 80%,#999); 
	}
	.hand_right{
	top:32px;
	left:40px;	
	}

	.arm_rewrite_right{
	position:relative;
	width:4px;
	height:45px;
	background:#07beea;
	top:-51px;
	left:18px;
	}

	.hand_left{
	top:34px;
	left:10px;	
	}

	.arm_rewrite_left{
	position:relative;
	width:4px;
	height:50px;
	background:#0096be;
	top:-52px;
	left:92px;
	}
	#foot{
	position:relative;
	width:280px;
	height:40px;
	top:-141px;
	left:20px;
	}

	#foot_left{
	width:125px;
	height:30px;
	background:#fff;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.75,#fff),color-stop(0.85,#eee), to(#999));	
	background: -moz-linear-gradient(right top, #fff,#fff 75%, #eee 85%, #999); 
	border:solid 2px #333;
	border-top-left-radius:80px;
	border-bottom-left-radius:40px;
	border-top-right-radius:60px;
	border-bottom-right-radius:60px;
	-webkit-border-top-left-radius:80px;
	-webkit-border-bottom-left-radius:40px;
	-webkit-border-top-right-radius:60px;
	-webkit-border-bottom-right-radius:60px;
	-moz-border-radius-topleft:80px;
	-moz-border-radius-bottomleft:40px;
	-moz-border-radius-topright:60px;
	-moz-border-radius-bottomright:60px;
	position:relative;
	left:8px;
	top:2px;
	box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	-webkit-box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	-moz-box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	z-index:-1;
	}

	#foot_right{
	position:relative;
	width:125px;
	height:30px;
	background:#fff;
	background: -webkit-gradient(linear, right top, left bottom, from(#fff),color-stop(0.75,#fff),color-stop(0.85,#eee), to(#999));	
	background: -moz-linear-gradient(right top, #fff,#fff 75%, #eee 85%, #999); 
	border:solid 2px #333;
	border-top-left-radius:60px;
	border-bottom-left-radius:60px;
	border-top-right-radius:80px;
	border-bottom-right-radius:40px;
	-webkit-border-top-left-radius:60px;
	-webkit-border-bottom-left-radius:60px;
	-webkit-border-top-right-radius:80px;
	-webkit-border-bottom-right-radius:40px;
	-moz-border-radius-topleft:60px;
	-moz-border-radius-bottomleft:60px;
	-moz-border-radius-topright:80px;
	-moz-border-radius-bottomright:40px;
	top:-32px;
	left:141px;
	box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	-webkit-box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	-moz-box-shadow:-6px 0px 10px rgba(0,0,0,0.35);
	z-index:-1;
	}
	#foot_rewrite{
	position:relative;
	width:20px;
	height:10px;
	background:#fff;
	background: -webkit-gradient(linear, right top, left bottom, from(#666),color-stop(0.83,#fff), to(#fff));	
	background: -moz-linear-gradient(right top, #666, #fff 83%, #fff); 
	top:-76px;
	left:127px;
	border-top:2px solid #000;
	border-right:2px solid #000;
	border-left:2px solid #000;
	border-top-right-radius:40px;
	border-top-left-radius:40px;
	-webkit-border-top-right-radius:40px;
	-webkit-border-top-left-radius:40px;
	-moz-border-radius-topleft:40px;
	-moz-border-radius-topright:40px;
	}
	#shadow_doutai_left{
	width:30px;
	height:200px;
	box-shadow:-10px 10px 15px rgba(0,0,0,0.45);
	-webkit-box-shadow:-10px 10px 15px rgba(0,0,0,0.45);
	-moz-box-shadow:-10px 10px 15px rgba(0,0,0,0.45);
	position:absolute;
	top:250px;
	left:46px;
	z-index:-10;
	}
	#shadow_doutai_right{
	width:30px;
	height:200px;
	box-shadow:10px 10px 15px rgba(0,0,0,0.35);
	-webkit-box-shadow:10px 10px 25px rgba(0,0,0,0.35);
	-moz-box-shadow:10px 10px 15px rgba(0,0,0,0.35);
	position:absolute;
	top:240px;
	left:230px;
	z-index:-10;
	}
	#shadow_doutai_arm{
	width:85px;
	height:165px;
	box-shadow:-100px 10px 15px rgba(0,0,0,0.0);
	-webkit-box-shadow:-100px 10px 15px rgba(0,0,0,0.25);
	-moz-box-shadow:-100px 10px 15px rgba(0,0,0,0.25);
	position:absolute;
	top:230px;
	left:113px;
	z-index:10;
	opacity:0.5;
	transform: rotate(-20deg);
	-webkit-transform: rotate(-20deg);
	-moz-transform: rotate(-20deg);
	-o-transform: rotate(-20deg);
	border-bottom-left-radius:40px;
	-webkit-border-bottom-left-radius:40px;
	-moz-border-radius-bottomleft:40px;

	border-top-left-radius:20px;
	-webkit-border-top-left-radius:20px;
	-moz-border-radius-topleft:20px;
	}
	#shadow_belt{
	width:40px;
	height:30px;
	box-shadow:-100px 10px 15px rgba(0,0,0,0);
	-webkit-box-shadow:-100px 10px 15px rgba(0,0,0,0.25);
	-moz-box-shadow:-100px 10px 15px rgba(0,0,0,0.25);
	position:absolute;
	top:240px;
	left:130px;
	z-index:10;
	border-bottom-left-radius:40px;
	-webkit-border-bottom-left-radius:40px;
	-moz-border-radius-bottomleft:40px;
	z-index:300;
	}

	#arm_left:not(\*|*), .arm_rewrite_left:not(\*|*){
	background:#07beea;
	}

	#arm_left, .arm_rewrite_left{
	background:#07beea\9;
	*background:#07beea;
	_background:#07beea;
	}

	/*#kiji{
	position:relative;
	top:-150px;
	}*/

	/*-----------------------------------------------------------------案例分割线之【2-1 CSS边框圆角效果】---------------------------------------------------------*/
	/*border-radius是向元素添加圆角边框。
	border-radius:10px; 所有角都使用半径为10px的圆角 
	border-radius: 5px 4px 3px 2px; 四个半径值分别是左上角、右上角、右下角和左下角，顺时针
	border-radius的值只能用px单位，你还可以用百分比或者em，但兼容性目前还不太好。 */
	.radius{
	
	width:220px;
	height:500px;
	background: #fff;
	}
	.circle{
	width: 200px;
	height: 200px;
	background: #ffff00;
	border-radius: 100px;

	}
	.semi-circle{
	width: 200px;
	height: 100px;
	background: #00ffff;
	border-radius: 100px 100px 0 0 ;
	}
	.right-semicircle{
	width: 100px;
	height: 200px;
	background: #ff00ff;
	border-radius: 0px 100px 100px 0px;
	}

	/*-----------------------------------------------------------案例分割线之【2-2 CSS3边框 阴影 box-shadow 】--------------------------------------------------*/

	/*box-shadow是向盒子添加阴影。支持添加一个或者多个。

	box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];(中括号里的为可选，XY的偏移量可为负数)。

	注意：inset 可以写在参数的第一个或最后一个，其它位置是无效的。（ inset 就是border框内嵌效果 而outset（默认效果）相应的就是外凸效果 ）。

	如果添加多个阴影，只需用逗号隔开即可。

	【阴影模糊半径与阴影扩展半径的区别】：

	阴影模糊半径：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；

	阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；*/

	.shadow{
	width:220px;
	height:500px;
	background: #fff;
	}
	.inset{
	width:200px;
	height: 70px;
	box-shadow: 10px 10px 10px 10px #0ee inset;
	}
	.outset{
	width:200px;
	height: 70px;
	box-shadow: 10px 10px 10px 10px #0ee ;
	}
	.shadows{
	width: 200px;
	height: 70px;
	box-shadow:10px 1px 6px 1px rgba(16,16,0,.3),10px 1px 8px 3px #f0f ,10px 1px 10px 5px #0ff;
	}
	.-x{
	width: 200px;
	height: 100px;
	box-shadow:-4px 4px 5px 1px #0ff;
	}
	.-y{
	width: 200px;
	height: 70px;
	box-shadow:4px -4px 5px 1px #000;
	}
	.under{
	width: 200px;
	height: 70px;
	box-shadow:0px 0px 15px 5px #000;
	}

	/*-----------------------------------------------------------案例分割线之【2-3为边框应用图片 border-image 】--------------------------------------------------*/

	/*为边框应用背景图片：border-image:url(xx.jpg) 70 70 70 70  repeat;
	70 70 70 70(这四个值为切割图片的宽度，单位为px/%,顺时针方向) ,repeat（图片延伸方式：round平铺、repeat重复、stretch拉伸）*/
	#border_image {
	
	height:100px;
	width:450px;
	border:10px solid #ccc;
	border-image:url(http://127.0.0.1/welcome.png) 70 repeat;
	}

	/*-----------------------------------------------------------案例分割线之【3-1 CSS3颜色之RGBA】--------------------------------------------------*/

	/*RGBA是在RGB的基础上增加了控制alpha透明度（不透明度opacity）的参数。
	color：rgba(R,G,B,A)
	以上R、G、B三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。
	并非所有浏览器都支持使用百分数值。
	A为透明度参数，取值在0~1之间，不可为负值。*/
	.opacity{
	
	background-image: url(http://localhost/xdzx/images/01.png);
	width: 420px;
	height: 100px;
	}
	p{

	background: rgba(255,255,100,.5);
	line-height: 100px;
	text-align: center;
	font-size: 30px;
	font-weight: bold;;

	}

	/*-----------------------------------------------------------案例分割线之【3-2 CSS3颜色之渐变色彩】--------------------------------------------------*/
	/*
	background:linear-gradient(to bottom,#dd2926,#a82724,#dd2926) no-repeat right(靠右) / 1px（宽） 15px（高）;

	CSS3 Gradient 分为线性渐变(linear)和径向渐变(radial)。
	background-image:linear-gradient(to top, red, orange);
	linear-gradient指定渐变类型。to top指定渐变方向。  red, orange指渐变颜色从red到orange。
	to top ：从下往上，角度为0；
	to right:从左往右，角度为90；
	to bottom:从上往下，角度为180；
	to left:从右往左，角度为270；
	to top left:从右下往左上，角度同上；
	to top right:从左下往右上，同上。
	*/
	.gradient{
	
	width:1300px;
	height:120px;
	background-color: #fff;
	display: flex;
	flex-direction: row;


	}
	.to{
	width:150px;
	height:100px;
	margin: 5px;
	line-height: 120px;
	text-align: center;

	}
	.top{
	background-image: linear-gradient(to top ,red, orange,yellow,green,blue,indigo,violet);/*从下往上*/
	}
	.right{
	background-image: linear-gradient(to right ,red, orange,yellow,green,blue,indigo,violet);/*从左往右*/
	}
	.bottom{
	background-image: linear-gradient(to bottom ,red, orange,yellow,green,blue,indigo,violet);/*从上往下*/
	}
	.left{
	background-image: linear-gradient(to left ,red, orange,yellow,green,blue,indigo,violet);/*从右往左*/
	}
	.topleft{
	background-image: linear-gradient(to top left ,red, orange,yellow,green,blue,indigo,violet);/*从右下往左上*/
	}
	.topright{
	background-image: linear-gradient(to top right ,red, orange,yellow,green,blue,indigo,violet);/*从左下往右上*/
	}
	.bottomleft{
	background-image: linear-gradient(to bottom left ,red, orange,yellow,green,blue,indigo,violet);/*从右上往左下*/
	}
	.bottomright{
	background-image: linear-gradient(to bottom right ,red, orange,yellow,green,blue,indigo,violet);/*从右下往左上*/
	}

	/*-----------------------------------------案例分割线之【4-1 CSS3文字与字体 text-overflow 与 word-wrap】-----------------------------------*/

	/*text-overflow只是用来说明文字溢出时用什么方式显示。
	text-overflow:ellipsis; (clip:剪切，ellipsis:省略号)
	white-space:nowrap; （要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示）
	overflow:hidden; （及溢出内容为隐藏，只有这三者才能实现溢出文本显示省略号的效果）*/

	/*word-wrap也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行。
	word-wrap:normal|break-word;(nomal:连续内容显示完换行，break-word:内容遇边界换行)
	normal为浏览器默认值，break-word设置在长单词或 URL地址内部进行换行，此属性不常用，用浏览器默认值即可。*/
	.text{
	
	width:200px;
	background-color: #ffa;
	}
	.overflow{
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
	}
	.normal{
	color:#e1e;
	word-wrap: normal;
	}
	.break{
	color:#000;
	word-wrap: break-word;
	}

	/*-----------------------------------------案例分割线之【4-2 CSS3文字与字体 嵌入字体@font-face】-----------------------------------*/
	/*@font-face能够加载服务器端的字体文件，让浏览器端可以显示用户电脑里没有安装的字体。
	@font-face {
	font-family : 字体名称;
	src : 字体文件在服务器上的相对或绝对路径;
	}
	这样设置之后，就可以像使用普通字体一样在（font-*）中设置字体样式*/

	@font-face{
	font-family: "Fruktur";
	src: url("http://fonts.googleapis.com/css?family=Fruktur");
	}
	.font{
	
	width: 340px;
	padding: 30px;    
	color: #566F89;
	background: #000;
	font-size:58px;
	font-family: "Fruktur";
	}

	/*-----------------------------------------案例分割线之【4-2 CSS3文字与字体 文本阴影text-shadow】-----------------------------------*/

	/*文本阴影text-shadow
	text-shadow: X-Offset Y-Offset blur color;
	X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；      

	Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；

	Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；

	Color：是指阴影的颜色，其可以使用rgba色*/
	/*font: bold 55px/100% "微软雅黑";（加粗、字体大小、字体）*/

	.font{
	text-shadow: 2px 2px 0 red;
	}

	/*-----------------------------------------案例分割线之【5-1 CSS3背景 background-origin 背景原点】-----------------------------------*/
	/*设置元素背景图片的原始起始位置。
	background-origin ： border-box | padding-box | content-box;
	参数分别表示背景图片是从边框，还是内边距（默认值），或者是内容区域开始显示。
	*如果背景不是no-repeat，这个属性无效，它会从边框开始显示。*/

	.origin{
	
	width:300px;
	border:20px dashed #2fb;
	background: #fff url(http://localhost/xdzx/images/02.png) no-repeat;
	background-origin: content-box;
	/*background-clip: content-box;背景裁剪*/ 
	 padding:20px;
	 position: relative;
	}
	.padding{
		position: absolute;
		top:0;
		left:0;
	}
	.center{
	height:150px;
	border:2px #333 solid;
	}

	/*-----------------------------------------案例分割线之【5-2 CSS3背景 background-clip 背景裁剪】-----------------------------------*/

	/*将背景图片做适当的裁剪。
	background-clip ： border-box | padding-box | content-box | no-clip
		分别表示从边框、或内填充，或者内容区域向外裁剪背景。no-clip表示不裁切，和参数border-box显示同样的效果。backgroud-clip默认值为border-box。*/
	.clip{
	position: relative;
	width:300px;
	border:20px dashed #f99;
	background: #fff url(http://localhost/xdzx/images/02.png) no-repeat;
	background-origin: content-box;
	background-clip: content-box;/*背景裁剪*/
	padding:20px;
	font-weight:bold; 
	}

	/*-----------------------------------------案例分割线之【5-3 CSS3背景  background-size 背景图片大小】-----------------------------------*/
	/*background-size: auto | <长度值> | <百分比> | cover | contain

	1、auto：默认值，不改变背景图片的原始高度和宽度；

	2、<长度值>：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；

	3、<百分比>：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；

	4、cover：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器；

	5、contain：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。*/

	.bgsize{
	
	width:300px;
	height:140px;
	border:1px #000 solid;
	font: 15px/100% "微软雅黑";
	letter-spacing: 2px;
	color:#fff;
	background: #fff url(http://localhost/xdzx/images/02.png) no-repeat;
	background-size:contain;
	}

	/*-----------------------------------------案例分割线之【5-4 CSS3背景  multiple backgrounds 多重背景】-----------------------------------*/
	/*background-repeat : repeat1,repeat2,...,repeatN;
	backround-position : position1,position2,...,positionN;
	background-size : size1,size2,...,sizeN;
	background-attachment : attachment1,attachment2,...,attachmentN;
	background-clip : clip1,clip2,...,clipN;
	background-origin : origin1,origin2,...,originN;
	background-color : color;*/

	/*1.用逗号隔开每组 background 的缩写值；
	2.如果有 size 值，需要紧跟 position 并且用 "/" 隔开；
	3.如果有多个背景图片，而其他属性只有一个（例如 background-repeat 只有一个），表明所有背景图片应用该属性值。
	4.background-color 只能设置一个。*/

	.demo{
	width: 300px;
	height: 140px;
	border: 1px solid #999;

	background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),
	              url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),
	              url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);
	background-position: left top, 100px 0, 200px 0;
	background-repeat: no-repeat, no-repeat, no-repeat;

	margin:0 0 20px 0;
	}
	.task {
	width: 300px;
	height: 140px;
	border: 1px solid #999;

	background:url(http://localhost/xdzx/images/03.png), 
	       url(http://localhost/xdzx/images/03.png);
	background-size:200px 80px,150px 50px;
	background-position:left top ,right bottom;
	background-repeat: no-repeat, no-repeat;           
	}

	/*-----------------------------------------案例分割线之【5-5 CSS3背景  制作导航菜单综合练习题】-----------------------------------*/

	.nav{
	  width:560px;
	  height: 50px;
	  font:bold 0/50px Arial;
	  text-align:center;
	  margin:40px auto 0;
	  background: #f65f57;
	  /*制作圆*/
	  border-radius:6px;
	  /*制作导航立体风格*/
	  box-shadow:5px 5px 1px #b64b41;
	}
	.nav a{
	  display: inline-block;
	  -webkit-transition: all 0.2s ease-in;
	  -moz-transition: all 0.2s ease-in;
	  -o-transition: all 0.2s ease-in;
	  -ms-transition: all 0.2s ease-in;
	  transition: all 0.2s ease-in;
	}
	.nav a:hover{
	  -webkit-transform:rotate(10deg);
	  -moz-transform:rotate(10deg);
	  -o-transform:rotate(10deg);
	  -ms-transform:rotate(10deg);
	  transform:rotate(10deg);
	}

	.nav li{
	  position:relative;
	  display:inline-block;
	  padding:0 16px;
	  font-size: 13px;
	  text-shadow:1px 2px 4px rgba(0,0,0,.5);
	  list-style: none outside none;
	}
	/*使用伪元素制作导航列表项分隔线*/
	.nav li:before{
		position: absolute;
		 content:"";
		top:19px;
		left:0px;
		width:1px;
		height:14px;

	background:linear-gradient(to bottom,#dd2926,#a82724,#dd2926) no-repeat ;}

	/*删除第一项和最后一项导航分隔线*/
	.nav li:first-child:before {background :none;}
	.nav a,
	.nav a:hover{
	  color:#fff;
	  text-decoration: none;
	}

	/*-----------------------------------------案例分割线之【6-1 CSS3选择器 属性选择器】-----------------------------------*/

/*E[att^="val"]:匹配开头.
E[att$="val"]:匹配结尾.
E[att*="val"]:匹配包含.*/


	a{

	text-decoration:none;/*去掉下划线*/
	/*text-decoration:underline; 加上下划线*/
	color:#ddd;
	}
	a[class^=column]{ 
	    background:red;
	}
	a[href$=doc]{
	    background:green;
	   
	}
	a[title*=box]{
	    background:blue;
	}

	/*-----------------------------------------案例分割线之【6-2 CSS3 结构性伪类选择器—root】-----------------------------------*/

	/*:root选择器，从字面上我们就可以很清楚的理解是根选择器，他的意思就是匹配元素E所在文档的根元素。在HTML文档中，根元素始终是<html>。
	“:root”选择器等同于<html>元素，简单点说：

	:root{background:orange}

	html {background:orange;}

	得到的效果等同。

	建议使用:root方法。

	另外在IE９以下还可以借助“:root”实现hack功能。*/
	:root{
    background:#333;
	}

	/*-----------------------------------------案例分割线之【6-3 CSS3 结构性伪类选择器—not】-----------------------------------*/

	/*:not选择器称为否定选择器，和jQuery中的:not选择器一模一样，可以选择除某个元素之外的所有元素。*/

	/*div{
	padding: 10px 20px;
	min-height: 50px;
	}
	div:not([id="footer"]){
	background: orange;
	}除了id为footer以外的所有id的背景色都改为橘色*/


	/*-----------------------------------------案例分割线之【6-4 CSS3 结构性伪类选择器—empty】-----------------------------------*/
	/*:empty选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。*/
	
	/*div {
  		min-height: 30px;
		}
	div:empty{
		border:5 solid green;
	}*/


	/*-----------------------------------------案例分割线之【6-5 CSS3 结构性伪类选择器—targrt】-----------------------------------*/
	/*:target选择器称为目标选择器，用来匹配文档(页面)的url的某个标志符的目标元素。
	1、具体来说，触发元素的URL中的标志符通常会包含一个#号，后面带有一个标志符名称。
	2、：target就是用来匹配id为“标识符名称”的元素。
	多个url（多个target）处理：当同一个页面上有很多的url的时候你可以取不同的名字，只要#号后对的名称与id=""中的名称对应就可以了。*/

	#brand:target p{
		background: green;
		color:#fff;
	}
	#jake:target {
		background: orange;
		color:#fff;
	}

	/*-----------------------------------------案例分割线之【6-6 CSS3 结构性伪类选择器—first-child】-----------------------------------*/
	/*“:first-child”选择器表示的是选择父元素的第一个子元素的元素E。*/
	ul>li:first-child{/*把第一个元素颜色改为红色*/
		color:#f00;
	}
 

	/*-----------------------------------------案例分割线之【6-7 CSS3 结构性伪类选择器—last-child】-----------------------------------
	“:last-child”选择器选择的是元素的最后一个子元素。*/
	/*ul {
	border: 1px solid #ccc;
	list-style: none outside none;
	width: 220px;
	margin: 20px auto;
	padding: 0;
	}
	ul > li {
	list-style: none outside none;
	margin:0;
	padding: 10px;
	border-bottom: 3px solid #ccc;
	}
	ul > li:last-child {
	border-bottom: none;
	}*/

/*-----------------------------------------案例分割线之【6-8 CSS3 结构性伪类选择器:nth-child(n)】-----------------------------------
“:last-child”选择器选择的是元素的最后一个子元素。“:nth-child(n)”选择器用来定位某个父元素的一个或多个特定的子元素。
其中“n”是其参数，而且可以是整数值(1,2,3,4)，也可以是表达式(2n+1、-n+5)和关键词(odd奇数、even偶数)，但参数n的起始值始终是1，而不是0。
也就是说，参数n的值为0时，选择器将选择不到任何匹配的元素。*/

/*经验与技巧:当“:nth-child(n)”选择器中的n为一个表达式时，其中n是从0开始计算，当表达式的值为0或小于0的时候，不选择任何匹配的元素。*/

ol > li:nth-child(2n-1){
  background: green;
}

/*-----------------------------------------案例分割线之【6-9 CSS3 结构性伪类选择器:nth-last-child(n)】-----------------------------------
从某父元素的最后一个子元素开始计算，来选择特定的元素。*/

ol>li:nth-last-child(1){/*把倒数第一项的背景改为橙色*/
	background: #fd4a04;
}

/*-----------------------------------------案例分割线之【6-10 CSS3 结构性伪类选择器:first-of-type】-----------------------------------
“:first-of-type”选择器类似于“:first-child”选择器，不同之处就是指定了元素的类型,其主要用来定位一个父元素下的某个类型的第一个子元素。*/

ol>li:first-of-type{/*li项的第一个元素颜色改为红*/
	color:#f00;
}

/*-----------------------------------------案例分割线之【6-11 CSS3 nth-of-type(n)选择器】-----------------------------------
:nth-of-type(n)计算父元素中指定的某种类型的子元素。n参数也一样，可以是具体的整数，也可以是表达式，还可以是关键词。*/

/*.wrappe > div:nth-of-type(2n-1),
.wrappe > p:nth-of-type(2n){
  background: orange;
}

.wrappe > div:nth-of-type(2n+1),
.wrappe > p:nth-of-type(2n){
  background: orange;
}

.wrappe > div:nth-of-type(odd),
.wrappe > p:nth-of-type(even){
  background: orange;
}*/

/*-----------------------------------------案例分割线之【6-12 CSS3 last-of-type(n)选择器】-----------------------------------
:last-of-type”选择器和“:first-of-type”选择器功能是一样的，不同的是他选择是父元素下的某个类型的最后一个子元素。*/

/*.wrappe>div:last-of-type{
	background: orange;
}*/


/*-----------------------------------------案例分割线之【6-13 CSS3 nth-last-of-type(n)选择器】-----------------------------------*/

/*“:nth-last-of-type(n)”选择器和“:nth-of-type(n)”选择器是一样的，
选择父元素中指定的某种子元素类型，但它的起始方向是从最后一个子元素开始，
而且它的使用方法类似于上节中介绍的“:nth-last-child(n)”选择器一样。*/

/*.wrapper > div:nth-last-of-type(5){ 倒数第五个Div元素背景设置为橙色。
  background: orange;
}*/


/*-----------------------------------------案例分割线之【6-14 CSS3 only-child选择器】-----------------------------------*/

/*:only-child”选择器选择的是父元素中只有一个子元素，而且只有唯一的一个子元素。
也就是说，匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素。*/

/*li:only-child {改变只有一个列表项的背景色为橙色。
  background: orange;
}*/



/*-----------------------------------------案例分割线之【6-15 CSS3  only-of-type选择器】-----------------------------------*/

/*使用“:only-of-type”选择器就可以选中这个元素中的唯一一个类型子元素。*/

/*.wrapper p:only-of-type{ 将仅有一个P元素的元素背景修改为橙色
  background: orange;
}*/



/*-----------------------------------------案例分割线之【7-1 CSS3选择器 :enabled选择器】-----------------------------------*/
/*在Web的表单中，有些表单元素有可用（“:enabled”）和不可用（“:disabled”）状态，比如输入框，密码框，复选框等。
在默认情况之下，这些表单元素都处在可用状态。
那么我们可以通过伪选择器“:enabled”对这些表单元素设置样式。*/

/*div {
  margin: 30px;
}
input[type="text"]:enabled { 给可用状态的input表单设置样式
  border: 1px solid #00f;
  box-shadow: 0 0 20px #00f;
}
input[type="text"]:disabled { 给不可用状态的input表单设置样式
  border: 1px solid #f00;
  box-shadow: none;
}
*/


/*-----------------------------------------案例分割线之【7-2 CSS3选择器 :disabled选择器】-----------------------------------*/
/*:disabled”选择器刚好与“:enabled”选择器相反，用来选择不可用表单元素。要正常使用“:disabled”选择器，需要在表单元素的HTML中设置“disabled”属性。*/
/*input[type="submit"]:disabled{选择不可用表单元素，改变
  background: #000;
  border-color: #fff;
 color:#333;
}*/



/*-----------------------------------------案例分割线之【7-3 CSS3选择器 :checked选择器】-----------------------------------*/
/*checkbox多选框和radio单选按钮 */
/*inline-block主要的用处是用来处理行内非替换元素的高宽问题的！
行内非替换元素，比如span、a等标签，正常情况下不能设置宽高的，加上该属性之后，就可以触发让这类标签表现得如块级元素一样，可以设置宽高。
注意IE6不支持inline-block属性，可以用hack来解决：*display:inline;zoom:1;*/
/*在CSS3中，我们可以通过状态选择器“:checked”配合其他标签实现自定义样式。而“:checked”表示的是选中状态。*/

/*通过“:checked”状态来自定义复选框效果。*/
/*.form {
  border: 1px solid #ccc;
  padding: 20px;
  width: 300px;
  margin: 30px auto;
}
.wrapper {
  margin-bottom: 10px;
}

.box {
  display: inline-block;
  width: 30px;
  height: 30px;
  margin-right: 10px;
  position: relative;
  background: orange;
  vertical-align: middle;
  border-radius: 100%;
}
.box input {
  opacity: 0;
  position: absolute;
  top:0;
  left:0;
  width: 100%;
  height:100%;
  z-index:100;使input按钮在span的上一层，不加，点击区域会出现不灵敏
}

.box span { 
  display: block;
  width: 10px;
  height: 10px;
  border-radius: 100%;
  position: absolute;
  background: #fff;
  top: 50%;
  left:50%;
  margin: -5px 0  0 -5px;
  z-index:1;
}

input[type="radio"] + span {
  opacity: 0;

}
input[type="radio"]:checked + span {
  opacity: 1;
}*/




/*-----------------------------------------案例分割线之【7-4 CSS3选择器 ::selection选择器】-----------------------------------*/
/*“::selection”伪元素是用来匹配突出显示的文本(用鼠标选择文本时的文本)。浏览器默认情况下，用鼠标选择网页文本是以“深蓝的背景，白色的字体”显示的*/
/*注意：
1、IE9+、Opera、Google Chrome 以及 Safari 中支持 ::selection 选择器。
2、Firefox 支持替代的 ::-moz-selection。*/
::selection{
  background: orange;
  color: white;
}
::-moz-selection{
  background: orange;
  color: white;
}


/*-----------------------------------------案例分割线之【7-5 CSS3选择器 :read-only选择器】-----------------------------------*/
/*“:read-only”伪类选择器用来指定处于只读状态元素的样式。简单点理解就是，元素中设置了“readonly=’readonly’”*/
/*input[type="text"]:-moz-read-only{
  border-color: #ccc;
}
input[type="text"]:read-only{
  border-color: #ccc;
}
textarea:-moz-read-only{
  border: 1px solid #ccc;
  height: 50px;
  resize: none;
  background: #eee;
}
textarea :read-only {
  border: 1px solid #ccc;
  height: 50px;
  resize: none;
  background: #eee;
}*/





/*-----------------------------------------案例分割线之【7-6 CSS3选择器 :read-write选择器】-----------------------------------*/
/*“:read-write”选择器刚好与“:read-only”选择器相反，主要用来指定当元素处于非只读状态时的样式。*/
/*input[type="text"]:-moz-read-write{
  border:2px solid red;
}
input[type="text"]:read-write{
  border:2px solid red;
}*/




/*-----------------------------------------案例分割线之【7-7 CSS3选择器 ::before和::after】-----------------------------------*/
/*::before和::after这两个主要用来给元素的前面或后面插入内容，这两个常和"content"配合使用，使用的场景最多的就是清除浮动。*/
.box h3{
  text-align:center;
  position:relative;
  top:80px;
}
.box {
  width:70%;
  height:200px;
  background:#FFF;
  margin:40px auto;
}

.effect{
  position:relative;       
    -webkit-box-shadow:0 2px 10px rgba(0, 0, 255, 0.9), 0 0 40px rgba(0, 0, 255, 0.9) inset;
	   -moz-box-shadow:0 2px 10px rgba(0, 0, 255, 0.9), 0 0 40px rgba(0, 0, 255, 0.9) inset;
			box-shadow:0 2px 10px rgba(0, 0, 255, 0.9), 0 0 40px rgba(0, 0, 255, 0.9) inset;
}
.effect::before, .effect::after{
    content:"";
	position:absolute; 
	z-index:-1;
	-webkit-box-shadow:0 0 20px rgba(0,0,255,0.8);
	-moz-box-shadow:0 0 20px rgba(0,0,255,0.8);
	box-shadow:0 0 20px rgba(0,0,255,0.8);
	top:50%;
	bottom:0px;
	left:10px;
	right:10px;
	-moz-border-radius:100px/10px;
	border-radius:100px/10px;
}
/*border-radius: 2em 1em 4em / 0.5em 3em;
等价于：
border-top-left-radius: 2em 0.5em;
border-top-right-radius: 1em 3em;
border-bottom-right-radius: 4em 0.5em;
border-bottom-left-radius: 1em 3em;*/




/*-----------------------------------------案例分割线之【8-1 CSS3变形--旋转 rotate()】-----------------------------------*/
/*旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，
设置一个角度值，用来指定旋转的幅度。
如果这个值为正值，元素相对原点中心顺时针旋转；
如果这个值为负值，元素相对原点中心逆时针旋转。*/
.wrapper1 {
  margin: 100px auto;
  width: 300px;
  height: 200px;
  border: 2px dotted blue;
}

.wrapper1 div{
  width: 300px;
  height: 200px;
  line-height: 200px;
  text-align: center;
  background: green;
  color: #fff;
  -webkit-transform: rotate(-20deg);
  -moz-transform: rotate(-20deg);
  transform:rotate(-20deg);
}
.wrapper1 span {
  display:block;
 -webkit-transform: rotate(20deg);
 -moz-transform: rotate(20deg);
  transform: rotate(20deg);
 }




/*-----------------------------------------案例分割线之【8-2 CSS3变形-- 扭曲 skew()】-----------------------------------*/
/*扭曲skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。
这与rotate()函数的旋转不同，rotate()函数只是旋转，而不会改变元素的形状。
skew()函数不会旋转，而只会改变元素的形状。*/

/*Skew()具有三种情况：

1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；
第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。

2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；
3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形）*/

.wrapper2 {
  width: 300px;
  height: 100px;
  border: 2px dotted red;
  margin: 30px auto;
}

.wrapper2 div {
  width: 300px;
  height: 100px;
  line-height: 100px;
  text-align: center;
  color: #fff;
  background: orange;
  -webkit-transform: skew(45deg);
  -moz-transform: skew(45deg);
  transform:skew(45deg);
}

.wrapper2 span {
  display:block;
  -webkit-transform: skew(-45deg);
  -moz-transform: skew(-45deg);
  transform:skew(-45deg);
}




/*-----------------------------------------案例分割线之【8-3 CSS3变形-- 缩放 scale()】-----------------------------------*/
/*缩放 scale()函数 让元素根据中心原点对对象进行缩放。
1、 scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）,注意：Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。
2、scaleX(x)元素仅水平方向缩放（X轴缩放）
3、scaleY(y)元素仅垂直方向缩放（Y轴缩放）*/
.wrapper3 {
  width: 200px;
  height: 200px;
  border:2px dashed red;
  margin: 100px auto;
}

.wrapper3 div {
  width: 200px;
  height: 200px;
  line-height: 200px;
  background: orange;
  text-align: center;
  color: #fff;
}

.wrapper3:hover div { /*鼠标划过时容器的状态缩小到0.8*/
  opacity: .5;
  -webkit-transform: scale(0.8);
  -moz-transform: scale(0.8);
  transform: scale(0.8);
}




/*-----------------------------------------案例分割线之【8-4 CSS3变形-- 位移 translate()】-----------------------------------*/
/*translate()函数可以将元素向指定的方向移动，类似于position中的relative。
或以简单的理解为，使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。
translate我们分为三种情况：
1、translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）
2、translateX(x)仅水平方向移动（X轴移动）
3、translateY(Y)仅垂直方向移动（Y轴移动）*/
.wrapper4{
	padding: 20px;
	background: orange;
	color:#fff;
	position: absolute;
	top:50%;
	left:50%;
	border-radius: 5px;
	transform: translate(-50%,-50%);
	-webkit-transform: translate(-50%,-50%);
	-moz-transform: translate(-50%,-50%);
}




/*-----------------------------------------案例分割线之【8-5 CSS3变形-- 矩阵 matrix（）】-----------------------------------*/
/*matrix() 是一个含六个值的(a,b,c,d,e,f)变换矩阵（竖写），用来指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。
就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素,此属性值使用涉及到数学中的矩阵*/
.wrapper5 {
  width: 300px;
  height: 200px;
  border: 2px dotted red;
  margin: 40px auto;
}

.wrapper5 div {
  width:300px;
  height: 200px;
  background: orange;
  -webkit-transform: matrix(1,0,0,1,100,100);
  transform: matrix(1,0,0,1,100,100);
}
/*矩阵元素中心点假设为（x,y）
偏移后的x坐标=ax+cy+e,偏移后的y坐标=bx+dy+e,
假设矩阵中心点为（0,0）
x=1*0+0*0+100=100,y=0*0+1*0+100=100。也就等同于：transform:rotate(100px,100px)*/




/*-----------------------------------------案例分割线之【8-6 CSS3变形: 原点 transform-origin】-----------------------------------*/
/*任何一个元素都有一个中心点，默认情况之下，其中心点是居于元素X轴和Y轴的50%处.
在没有重置transform-origin改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。
但很多时候，我们可以通过transform-origin来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置。*/

/*transform-origin取值和元素设置背景中的background-position取值类似(左上（0,0），右上（100% 0%），左下（0% 100%），右下（100% 100%），中心（50% 50%）)，
见图：transform-origin取值.jpg*/
.wrapper6 {
  width: 400px;
  height: 100px;
  border: 2px dotted red;
  margin: 20px auto; 
  text-align: center;
  line-height: 100px;
}
.wrapper6 div {
  background: orange;
  color: #fff;
  -webkit-transform: skew(45deg);
  -moz-transform: skew(45deg);
  transform: skew(45deg);
  -webkit-transform-origin: top right;
  -moz-transform-origin: top right;
  transform-origin: top right;
}





/*-----------------------------------------案例分割线之【8-7 CSS3中的动画: 过渡属性 transition-property】-----------------------------------*/
/*通过鼠标的单击、获得焦点，被点击或对元素任何改变中触发，并平滑地以动画效果改变CSS的属性值。

在CSS中创建简单的过渡效果可以从以下几个步骤来实现：
第一，在默认样式中声明元素的初始状态样式；
第二，声明过渡元素最终状态样式，比如悬浮状态；
第三，在默认样式中通过添加过渡函数，添加一些不同的样式。

transition-property[用来指定过渡动画的CSS属性名称]，而这个过渡属性只有具备一个中点值的属性（需要产生动画的属性）才能具备过渡效果，
其对应具有过渡的CSS属性主要有,见图transition-property.jpg
特别注意：当“transition-property”属性设置为all时，表示的是所有中点值的属性。*/
.wrapper7{
	width:200px;
	height:200px;
	background: red;
	margin: 20px auto;
	-webkit-transition-property: width height border-radius;
	transition-property: width height border-radius;/*过渡属性*/
	-webkit-transition-duration: 2s;
	transition-duration: 2s;/*持续时间*/
	-webkit-transition-timing-function: linear;
	transition-timing-function: linear;/*过渡函数*/
	-webkit-transition-delay:1s;
	transition-delay: 1s;
	/*-webkit-transition:all 2s linear 1s;
	transition:all 2s linear 1s;过渡1s后触发，整个过渡时间持续2s。*/
}
.wrapper7:hover{/*鼠标悬停（hover）*/
	width:400px;
	height:400px;
	border-radius:100%;
}





/*-----------------------------------------案例分割线之【8-8 CSS3中的动画: 过渡所需时间 transition-duration】-----------------------------*/
/*transition-duration属性主要用来设置一个属性过渡到另一个属性所需的时间，也就是从旧属性过渡到新属性花费的时间长度，俗称[持续时间]。
案例：8-7*/


/*-----------------------------------------案例分割线之【8-9 CSS3中的动画: 过渡函数 transition-timing-function】-----------------------------*/
/*transition-timing-function属性指的是过渡的“缓动函数”。主要用来指定浏览器的过渡速度，以及过渡期间的操作进展情况，其中要包括以下几种函数：
见图transition-timing-function过渡函数.jpg
案例：8-7*/


/*-----------------------------------------案例分割线之【8-10 CSS3中的动画: 过渡延迟时间 transition-delay】-----------------------------*/
/*当改变元素属性值后多长时间开始执行。
有时我们想改变两个或者多个css属性的transition效果时，只要把几个transition的声明串在一起，用逗号（“，”）隔开，
然后各自可以有各自不同的延续时间和其时间的速率变换方式。
但需要值得注意的一点：第一个时间的值为 transition-duration，第二个为transition-delay。
例如：a{ transition: background 0.8s ease-in 0.3,color 0.6s ease-out 0.3;}
案例：8-7*/




/*----------------------------------------------案例分割线之【9-1 CSS3 Keyframes介绍】--------------------------------------------------*/
/*Keyframes被称为关键帧，其类似于Flash中的关键帧。
在CSS3中其主要以“@keyframes”开头，后面紧跟着是动画名称加上一对花括号“{…}”，括号中就是一些不同时间段样式规则。*/
/*经验与技巧：在@keyframes中定义动画名称时，其中0%和100%还可以使用关键词from和to来代表，其中0%对应的是from，100%对应的是to。*/
	@keyframes wobble {
  from{
    /*margin-left: 50px;*/
    background:green;
  }
  50% {
    /*margin-left:100px;*/
    background:orange;
  }
  to {
    /*margin-left: 150px;*/
    background: blue;
  }
}
.wrapper9 {
  width: 100px;
  height: 100px;
  background:#000;
  color: #fff;
}
.wrapper9:hover{
  animation: wobble 5s ease .5s;
  animation-fill-mode:backwards;/*设置动画时间外属性:迅速应用动画的初始帧*/
}




/*----------------------------------------------案例分割线之【9-2 CSS3中调用动画】--------------------------------------------------*/
/*animation-name属性主要是用来调用 @keyframes 定义好的动画。*/
/*注意: animation-name 调用的动画名需要和“@keyframes”定义的动画名称完全一致（区分大小写），如果不一致将不具有任何动画效果。*/
/*语法：
animation-name: none | IDENT[,none|DENT]*;
1、IDENT是由 @keyframes 创建的动画名
2、none为默认值，当值为 none 时，将没有任何动画效果,这可以用于覆盖任何动画。
注意：需要在 Chrome 和 Safari 上面的基础上加上-webkit-前缀，Firefox加上-moz-。*/
@keyframes around{
  0% {
    transform: translateX(0);
  }
  25%{
    transform: translateX(180px);
  }
  50%{
     transform: translate(180px, 180px); 
  }
  75%{
    transform:translate(0,180px);
  }
  100%{
    transform: translateY(0);
  }
}
.wrapper10 {
  width: 200px;
  height: 200px;
  border: 1px solid red;
  margin: 20px auto;
  
}
.wrapper10 span {
  display: inline-block;
  width: 20px;
  height: 20px;
  background: orange;
  border-radius: 100%;
  animation-name:around;/*调用动画*/
  animation-duration: 10s;/*设置动画播放时间*/
  animation-timing-function: ease;/*设置动画播放方式*/
  animation-delay: 1s;/*设置动画开始播放的时间*/
  animation-iteration-count:infinite;/*设置动画播放次数*/
  animation-direction:alternate;/*设置动画播放方向*/
  animation-play-state:paused;/*设置动画的播放状态*/
}
.wrapper10:hover span {
  animation-play-state:running;/*设置动画的播放状态*/
}



/*----------------------------------------------案例分割线之【9-3 CSS3中设置动画播放时间】--------------------------------------------------*/
/*animation-duration主要用来设置CSS3动画播放时间，其使用方法和transition-duration类似，
是用来指定元素播放动画所持续的时间长，也就是完成从0%到100%一次动画所需时间。单位：S秒
语法规则
animation-duration: <time>[,<time>]*
取值<time>为数值，单位为秒，其默认值为“0”，这意味着动画周期为“0”，也就是没有动画效果（如果值为负值会被视为“0”）。
案例：9-2*/


/*----------------------------------------------案例分割线之【9-4 CSS3中设置动画播放方式】--------------------------------------------------*/
/*animation-timing-function
见图transition-timing-function过渡函数.jpg
案例：9-2*/


/*----------------------------------------------案例分割线之【9-5 CSS3中设置动画开始播放的时间】------------------------------------------*/
/*animation-delay属性用来定义动画开始播放的时间，用来触发动画播放的时间点。
和transition-delay属性一样，用于定义在浏览器开始执行动画之前等待的时间。
案例：9-2*/



/*----------------------------------------------案例分割线之【9-6 CSS3中设置动画播放次数】------------------------------------------*/
/*animation-iteration-count属性主要用来定义动画的播放次数。
语法规则：
animation-iteration-count: infinite | <number> [, infinite | <number>]*
1、其值通常为整数，但也可以使用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。
2、如果取值为infinite，动画将会无限次的播放。
案例：9-2*/




/*----------------------------------------------案例分割线之【9-7 CSS3中设置动画播放方向】------------------------------------------*/
/*animation-direction属性主要用来设置动画播放方向，
其语法规则如下：
animation-direction:normal | alternate [, normal | alternate]*
其主要有两个值：normal、alternate
1、normal是默认值，如果设置为normal时，动画的每次循环都是向前播放；
2、另一个值是alternate，他的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放。
案例：9-2*/





/*----------------------------------------------案例分割线之【9-8 CSS3中设置动画的播放状态】------------------------------------------*/
/*animation-play-state属性主要用来控制元素动画的播放状态。
参数：
其主要有两个值：running和paused。
其中running是其默认值，主要作用就是类似于音乐播放器一样，可以通过paused将正在播放的动画停下来，也可以通过running将暂停的动画重新播放，
这里的重新播放不一定是从元素动画的开始播放，而是从暂停的那个位置开始播放。
1、div:hover span { animation:paused;} 相当于清除了animation动画。元素的样式将会回到最原始的设置状态。
2、div:hover span { animation-play-state:paused;} 相当于中止动画。鼠标移开继续播放。
例如，页面加载时，动画不播放。代码如下：animation-play-state:paused;
9-2*/



/*----------------------------------------------案例分割线之【9-9 CSS3中设置动画时间外属性】------------------------------------------*/
/*animation-fill-mode属性定义在动画开始之前和结束之后发生的操作。

none:默认值，表示动画将按预期进行和结束，在动画完成其最后一帧时，动画会反转到初始帧处
forwards:表示动画在结束后继续应用最后的关键帧的位置
backwards:会在向元素应用动画样式时迅速应用动画的初始帧
both:元素动画同时具有forwards和backwards效果
案例：9-1*/


/*-------------------------------------------------------案例分割线之【9-10 3D旋转】-------------------------------------------------------*/
/*案例：3D旋转导航.html*/

/*-----------------------------------------------------案例分割线之【10-1 CSS3 多列布局——Columns】----------------------------------------*/
/*columns：<column-width> || <column-count>
<column-width>：主要用来定义多列中每列的宽度
<column-count>：主要用来定义多列中的列数*/
h2{padding: 5px;}
.columns{
  width: 900px;
  
  padding: 5px;
  border: 1px solid green;
  margin: 20px auto; 
  /*-webkit-columns:150px 3;
  -moz-columns: 150px 3;
  -o-columns:150px 3;
  -ms-columns: 150px 3;
  columns: 150px 3;*/
  -webkit-column-width:200px;
  -webkit-column-count:3; 
  -webkit-column-gap:3em;
  -webkit-column-rule:2px solid gray;
  -moz-column-width:200px;
  -moz-column-count:3; 
  -moz-column-gap:3em;
  -moz-column-rule:2px solid gray;
  -ms-column-width:200px;
  -ms-column-count:3;
  -ms-column-gap:3em;
  -ms-column-rule:2px solid gray;
  -o-column-width:200px;
  -o-column-count:3; 
  -o-column-gap:3em;
  -o-column-rule:2px solid gray; 
  column-width:200px;/*列宽*/
  column-count:3; /*列数*/
  columns-gap:3em;/*列间距*/
  column-rule:2px solid gray;/*列表边框*/
}
.columns p,
.columns h2{
	font-size: 10px;
	line-height: 12px;
	background: #1a5;
}
h2,p:nth-child(2n){
	column-span: all;/*跨列设置*/
	-webkit-column-span: all;
	-moz-column-span: all;
	-ms-column-span: all;
	-o-column-span: all;
}


/*-----------------------------------------------------案例分割线之【10-2 CSS3 多列布局——column-width】--------------------------------------*/
/*column-width属性在定义元素列宽的时候，既可以单独使用，也可以和多列属性中其他属性配合使用。
column-width: auto | <length>
auto：如果column-width设置值为auto或者没有显式的设置值时，元素多列的列宽将由其他属性来决定，比如前面的示例就是由列数column-count来决定。
<length>：使用固定值来设置元素列的宽度，其主要是由数值和长度单位组成，不过其值只能是正值，不能为负值。
案例：10-1*/



/*-----------------------------------------------------案例分割线之【10-3 CSS3 多列布局——column-count】--------------------------------------*/
/*column-count属性主要用来给元素指定想要的列数和允许的最大列数。其语法规则：
column-count：auto | <integer>
auto:此值为column-count的默认值，表示元素只有一列，其主要依靠浏览器计算自动设置。
<integer>:此值为正整数值，主要用来定义元素的列数，取值为大于0的整数，负值无效。
案例：10-1*/




/*-----------------------------------------------------案例分割线之【10-4 CSS3 列间距column-gap】--------------------------------------*/
/*column-gap主要用来设置列与列之间的间距，其语法规则如下：
column-gap: normal || <length>
normal：默认值，默值为1em（如果你的字号是px，其默认值为你的font-size值）。
<length>：此值用来设置列与列之间的距离，其可以使用px,em单位的任何整数值，但不能是负值。
案例：10-1*/




/*-----------------------------------------------------案例分割线之【10-5 CSS3  列表边框column-rule】--------------------------------------*/
/*column-rule主要是用来定义列与列之间的边框宽度、边框样式和边框颜色。
简单点说，就有点类似于常用的border属性。但column-rule是不占用任何空间位置的，在列与列之间改变其宽度不会改变任何列的位置。*/
/*column-rule:<column-rule-width>|<column-rule-style>|<column-rule-color>

column-rule-width：类似于border-width属性，主要用来定义列边框的宽度，其默认值为“medium（普通的）”，
					column-rule-width属性接受任意浮点数，但不接收负值。但也像border-width属性一样，可以使用关键词：medium、thick和thin。
column-rule-style：类似于border-style属性，主要用来定义列边框样式，其默认值为“none”。column-rule-style属性值与border-style属值相同，
					包括none、hidden、dotted（小圆点）、dashed、solid、double、groove、ridge、inset、outset。   
column-rule-color：类似于border-color属性，主要用来定义列边框颜色，其默认值为前景色color的值，使用时相当于border-color。
					column-rule-color接受所有的颜色。如果不希望显示颜色，也可以将其设置为transparent(透明色)   	
案例：10-1*/		   




/*-----------------------------------------------------案例分割线之【10-6 CSS3  跨列设置column-span】--------------------------------------*/
/*column-span主要用来定义一个分列元素中的子元素能跨列多少。
column-width、column-count等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题
不进行分列，也就是横跨所有列，此时column-span就可以轻松实现
column-span: none | all
none：此值为column-span的默认值，表示不跨越任何列。
all：这个值跟none值刚好相反，表示的是元素跨越所有列，并定位在列的Ｚ轴之上。
案例：10-1*/



/*-----------------------------------------------------案例分割线之【10-7 CSS3  盒子模型】--------------------------------------*/
/*盒模型定义了Web页面中的元素中如何来解析。CSS中每一个元素都是一个盒模型，包括html和body标签元素。
在盒模型中主要包括width、height、border、background、padding和margin这些属性，而且他们之间的层次关系可以相互影响。*/

/*在CSS中盒模型被分为两种，第一种是w3c的标准模型，另一种是IE的传统模型，它们相同之处都是对元素计算尺寸的模型，它们不同之处是两者的计算方法不一致。*/
/*【1.W3C标准盒模型】
外盒尺寸计算（元素空间尺寸）
	element空间高度＝内容高度＋内距＋边框＋外距
	element空间宽度＝内容宽度＋内距＋边框＋外距
内盒尺寸计算（元素大小）
	element高度＝内容高度＋内距＋边框（height为内容高度）
	element宽度＝内容宽度＋内距＋边框（width为内容宽度）*/

/*【2.IE传统下盒模型（IE6以下，不包含IE6版本或”QuirksMode下IE5.5+”）】
外盒尺寸计算（元素空间尺寸）
	element空间高度＝内容高度＋外距（height包含了元素内容宽度、边框、内距）
	element宽间宽度＝内容宽度＋外距（width包含了元素内容宽度、边框、内距）
内盒尺寸计算（元素大小）
	element高度＝内容高度（height包含了元素内容宽度、边框、内距）
	element宽度＝内容宽度（width包含了元素内容宽度、边框、内距）	*/


/*在CSS3中新增加了box-sizing属性，能够事先定义盒模型的尺寸解析方式，其语法规则如下：
box-sizing: content-box | border-box | inherit

content-box：默认值，其让元素维持W3C的标准盒模型，也就是说元素的宽度和高度（width/height）等于元素边框宽度（border）加上元素内距（padding）
			加上元素内容宽度或高度（content width/ height），也就是element width/height = border + padding + content width / height

border-box：重新定义CSS2.1中盒模型组成的模式，让元素维持IE传统的盒模型（IE6以下版本和IE6-7怪异模式），也就是说元素的宽度或高度等于元素内容的
			宽度或高度。从上面盒模型介绍可知，这里的内容宽度或高度包含了元素的border、padding、内容的宽度或高度
			（此处的内容宽度或高度＝盒子的宽度或高度—边框—内距）。
inherit：使元素继承父元素的盒模型模式*/


/*h1 {
  font-size: 20px;
  margin: 0;
  color: #fff;
}*/
#page:after,
#page:before{
  content:"";
  display: table;
}
#page:after{
  clear:both;
  overflow: hidden;
}

#page {
  margin-bottom: 20px;
}
#header {
  width: 100%;
  background: green;
  margin-bottom: 10px;
  padding: 20px;
}
.main {
  width: 60%;
  padding: 20px;
  background: orange;
  float: left;
}
.sidebar {
  width: 38%;
  float: right;
  background: #f36;
  padding: 20px;
}

#footer {
  width: 100%;
  background: #36f;
  padding: 20px;
  clear:both;
}

#header,
.main,
.sidebar,
#footer {
  -webkit-box-sizing:border-box;
  -moz-box-sizing:border-box;
  -o-box-sizing:border-box;
  -ms-box-sizing:border-box;
  box-sizing:border-box;
}
/*在自适应布局当中，在元素基础上添加内距padding，按照标准盒模型解析，往往会将布局撑破，但使用box-sizing的border-box值，可以让你轻松完成。*/




/*-----------------------------------------------------案例分割线之【10-8 CSS3 伸缩布局】--------------------------------------*/
/*Flexbox布局，即伸缩布局盒模型（Flexible Box）,考虑兼容性。
Flexbox布局功能主要具有以下几点：

第一，屏幕和浏览器窗口大小发生改变也可以灵活调整布局；

第二，可以指定伸缩项目沿着主轴或侧轴按比例分配额外空间（伸缩容器额外空间），从而调整伸缩项目的大小；

第三，可以指定伸缩项目沿着主轴或侧轴将伸缩容器额外空间，分配到伸缩项目之前、之后或之间；

第四，可以指定如何将垂直于元素布局轴的额外空间分布到该元素的周围；

第五，可以控制元素在页面上的布局方向；

第六，可以按照不同于文档对象模型（DOM）所指定排序方式对屏幕上的元素重新排序。也就是说可以在浏览器渲染中不按照文档流先后顺序重排伸缩项目顺序。*/

/*1.创建一个flex容器   
.flexcontainer{ display: -webkit-flex; display: flex; }

2.Flex项目显示   
Flex项目是Flex容器的子元素。他们沿着主要轴和横轴定位。默认的是沿着水平轴排列一行，值row。

3.Flex项目列显示
.flexcontainer{display: -webkit-flex; display: flex;  -webkit-flex-direction: column; flex-direction: column; }

4.Flex项目移动到顶部
如何将flex项目移动到顶部，取决于主轴的方向。
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; 
	-webkit-justify-content: flex-start; justify-content: flex-start; }主轴方向为水平时，通过justify-content设置。

.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row;
 -webkit-align-items: flex-start; align-items: flex-start; }主轴方向为垂直时，通过align-items设置；

5.Flex项目移到左边
flex项目称动到左边或右边也取决于主轴的方向。
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; 
	-webkit-justify-content: flex-start; justify-content: flex-start; } 如果flex-direction设置为row，设置justify-content控制方向;

.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; 
	-webkit-align-items: flex-start; align-items: flex-start; } 如果设置为column，设置align-items控制方向。

6.Flex项目移动右边
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; 
	-webkit-justify-content: flex-end; justify-content: flex-end; }

.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; 
	-webkit-align-items: flex-end; align-items: flex-end; }

7.水平垂直居中
在Flexbox容器中制作水平垂直居中是微不足道的。另外根据主轴的方向设置flex-direction为row或column。
不管flex项目是行还是列，都要设置它的justify-content、align-items为center。

8.Flex项目实现自动伸缩
您可以定义一个flex项目，如何相对于flex容器实现自动的伸缩。需要给每个flex项目设置flex属性设置需要伸缩的值。
.bigitem{ -webkit-flex:200; flex:200; }  .smallitem{ -webkit-flex:100; flex:100; }*/




/*-----------------------------------------------------案例分割线之【11-1 、2 Media Queries——媒体类型】--------------------------------------*/
/*使用CSS3中的Media Queries模块来让一个页面适应不同的终端（或屏幕尺寸），从而让你的页面让用户有一个更好的体验。
特色就是通过CSS3来查询媒体，然后调用对应的样式。   第一个是媒体类型，第二个是媒体特性。*/

/*一、媒体类型(W3C总共列出了10种媒体类型)
All:所有设备(常用)
Braille:盲人用点字法触觉回馈设备
Embossed:盲文打印机
Handheld:便携设备
Print:打印用纸或打印预览视图（常用）
Projection:各种投影设备
Screen:电脑显示器（常用）
Speech:语音或音频合成器
Tv:电视机类型设备
Tty:使用固定密度字母栅格的媒介，比如电传打字机和终端*/

/*媒体类型的引用方法：
1.link方法：引入媒体类型其实就是在<link>标签引用样式的时候，通过link标签中的media属性来指定不同的媒体类型。如下所示。
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<link rel="stylesheet" type="text/css" href="print.css" media="print" />

2.@import：可以引用样式文件，同样也可以用来引用媒体类型。@import引入媒体类型主要有两种方式，
（1）是在样式中通过@import调用另一个样式文件；
@importurl(reset.css) screen;   
@importurl(print.css) print;

（2）是在<head></head>标签中的<style></style>中引入，但这种使用方法在IE6~7都不被支持，如样式文件中调用另一个样式文件时，就可以指定
对应的媒体类型。
<head>
<style type="text/css">
    @importurl(style.css) all;
</style>
</head>

3.@media：是CSS3新特性，被称为媒体查询。在页面中也可以通过这个属性来引入媒体类型。

（1）在样式文件中引用媒体类型：

@media screen {
   选择器{/*你的样式代码写在这里…}
}

（2）使用@media引入媒体类型的方式是在<head></head>标签中的<style></style>中引用。
	<head>
	<style type="text/css">
	    @media screen{

	    选择器{/*你的样式代码写在这里…*/}
/*	}




/*-----------------------------------------------------案例分割线之【11-3 Media Queries使用方法】--------------------------------------*/
/*Media Queries能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。
具体来说,Media Queries的使用方法是，@media 媒体类型and （媒体特性）{你的样式}。  
eg,媒体特性(max-width: 480px);但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断。

Media Queries在实际项目中常用的方式:
1.最大宽度max-width:指媒体类型小于或等于指定的宽度时，样式生效。
eg: 
@media screen and (max-width:480px){.ads { display:none; }}

2.最小宽度min-width:是媒体类型大于或等于指定宽度时，样式生效。
eg:
@media screen and (min-width:900px){.wrapper{width: 980px;}}

3.多个媒体特性使用:Media Queries可以使用关键词"and"将多个媒体特性结合并在一种终端设备下渲染效果。
eg:当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”，如下所示。
@media screen and (min-width:600px) and (max-width:900px){body {background-color:#f5f5f5;}}

4.设备屏幕的输出宽度Device Width:指的是设备的实际分辨率，也就是指可视面积分辨率。
eg:“iphone.css”样式适用于最大设备宽度为480px，比如说iPhone上的显示
<link rel="stylesheet" media="screen and (max-device-width:480px)" href="iphone.css" />

5. not关键词:表示对后面的表达式执行取反操作
eg:样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。
@media not print and (max-width: 1200px){样式代码}

6.only关键词:排除不支持媒体查询的浏览器。
支持Media Queries的浏览器：不支持媒体类型，就忽略所设置的媒体类型，只执行媒体特性下的样式。
							支持媒体类型但不支持媒体特性，不执行媒体特性下的样式。
不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。
<linkrel="stylesheet" media="only screen and (max-device-width:240px)" href="android240.css" />

在Media Query中如果没有明确指定Media Type，那么其默认为all

另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。
<linkrel="stylesheet" type="text/css" href="style.css" media="handheld and (max-width:480px), screen and (min-width:960px)" />	

除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。*/



/*-----------------------------------------------------案例分割线之【11-4、5 Responsive响应式设计】--------------------------------------*/
/*Responsive设计简单的称为RWD，是精心提供各种设备都能浏览网页的一种设计方法，RWD能让你的网页在不同的设备中展现不同的设计风格。”
从这一点描述来说，RWD不是流体布局，也不是网格布局，而是一种独特的网页设计方法。

需要满足以下三个条件：
	网站必须建立灵活的网格基础；
	引用到网站的图片必须是可伸缩的；
	不同的显示风格，需要在Media Queries上写不同的样式。

1.流体网格：将每个网格格子使用百分比单位来控制网格大小。这种网格系统最大的好处是让你的网格大小随时根据屏幕尺寸大小做出相对应的比例缩放。

2.弹性图片
弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。而实现方法是比较简单，一句代码就能搞定的事情。
img {max-width:100%;}不幸的是，这句代码在IE8浏览器存在一个严重的问题，让你的图片会失踪。

3.媒体查询：使用这个属性可以让你的设计根据用户终端设备适配对应的样式。这也是响应式设计中最为关键的。
媒体查询可以根据设备的尺寸，查询出适配的样式。Responsive设计最关注的就是：
根据用户的使用设备的当前宽度，你的Web页面将加载一个备用的样式，实现特定的页面风格。

4.屏幕分辨率
屏幕分辨简单点说就是用户显示器的分辨率，
Responsive设计利用Media Queries属性针对浏览器使用的分辨率来适配对应的CSS样式。
因为只有知道Web页面要在哪种分辨率下显示何种效果，才能调用对应的样式。
大屏pc分辨率：min-width:768px;
一般pc分辨率：min-width:640px;
平板分辨率：min-width:480px;
手机分辨率：min-width：320px;

5.主要断点：设备宽度的临界点。
中是一个很重要的一部分。简单的描述就是，设备宽度的临界点。
在Media Queries中，其中媒体特性“min-width”和“max-width”对应的属性值就是响应式设计中的断点值。
简单点说，就是使用主要断点和次要断点，创建媒体查询的条件。而每个断点会对应调用一个样式文件（或者样式代码），
综合下来，设置断点应把握三个要点：满足主要的断点；有可能的话添加一些别的断点；设置高于1024的桌面断点。
*/




/*-----------------------------------------------------案例分割线之【11-6 Responsive布局技巧】--------------------------------------*/
/*在Responsive布局中，可以毫无保留的丢弃：
第一， 尽量少用无关紧要的div；
第二，不要使用内联元素（inline）；
第三，尽量少用JS或flash；
第四，丢弃没用的绝对定位和浮动样式；
第五，摒弃任何冗余结构和不使用100%设置。

有舍才有得，丢弃了一些对Responsive有影响的东东，那么有哪些东东能帮助Responsive确定更好的布局呢？
第一，使用HTML5 Doctype和相关指南；
第二，重置好你的样式（reset.css）；
第三，一个简单的有语义的核心布局；
第四，给重要的网页元素使用简单的技巧，比如导航菜单之类元素。

使用这些技巧，无非是为了保持你的HTML简单干净，而且在你的页面布局中的关键部分（元素）不要过分的依赖现代技巧来实现，比如说CSS3特效或者JS脚本。
说了这么多，怎么样的布局或者说HTML结构才是简单干净的呢？这里教大家一个快速测试的方法。你首先禁掉你页面中所有的样式（以及与样式相关的信息），
在浏览器中打开，如果你的内容排列有序，方便阅读，那么你的这个结构不会差到哪里去。*/





/*-----------------------------------------------------案例分割线之【11-7 Responsive设计——meta标签】--------------------------------------*/
/*为了让Responsive设计在智能设备中能显示正常，也就是浏览Web页面适应屏幕的大小，显示在屏幕上，可以通过这个可视区域的meta标签进行重置，
告诉他使用设备的宽度为视图的宽度，也就是说禁止其默认的自适应页面的效果，具体设置如下：
<meta name=”viewport” content=”width=device-width,initial-scale=1.0” />

Responsive设计是结合CSS3的Media Queries属性，才能尽显Responsive设计风格，但大家都清楚，在IE6-8中完全是不支持CSS3 Media。
你可以使用media-queries.js或者respond.js来在IE中添加对媒体查询的支持。
脚本下载地址： 
media-queries.js(http://code.google.com/p/css3-mediaqueries-js/)      
 respond.js(https://github.com/scottjehl/Respond)
 <!—[if lt IE9]>
      <scriptsrc=http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js></script>
 ​<![endif]>*/





/*------------------------------------------------案例分割线之【11-8 Responsive设计——不同设备的分辨率设置】--------------------------------*/
/*1.1024px显屏

@media screen and (max-width : 1024px) {                    
 样式写在这里           
}     
2.800px显屏

@media screen and (max-width : 800px) {              
 样式写在这里           
}     
3.640px显屏

@media screen and (max-width : 640px) {              
/样式写在这            
}     
4.iPad横板显屏

@media screen and (max-device-width: 1024px) and (orientation: landscape) {              
样式写在这          
}     
5.iPad竖板显屏

@media screen and (max-device-width: 768px) and (orientation: portrait) {         
样式写在这             
}     
6.iPhone 和 Smartphones

@media screen and (min-device-width: 320px) and (min-device-width: 480px) {              
 样式写在这            
}     
*/




/*------------------------------------------------案例分割线之【12-1 自由缩放属性 resize】----------------------------------------------*/
/*它允许用户通过拖动的方式来修改元素的尺寸来改变元素的大小。到目前为止，可以使用overflow属性的任何容器元素。
resize属性主要是用来改变元素尺寸大小的，其主要目的是增强用户体验。

resize: none | both | horizontal | vertical | inherit
none:用户不能拖动元素修改尺寸大小。
both:用户可以拖动元素，同时修改元素的宽度和高度
horizontal:用户可以拖动元素，仅可以修改元素的宽度，但不能修改元素的高度。
vertical:用户可以拖动元素，仅可以修改元素的高度，但不能修改元素的宽度。
inherit:继承父元素的resize属性值。
*/
.textarea{
	resize:both;
}




/*------------------------------------------------案例分割线之【12-2 CSS3外轮廓属性-outline】----------------------------------------------*/
/*外轮廓outline在页面中呈现的效果和边框border呈现的效果极其相似，但和元素边框border完全不同，外轮廓线不占用网页布局空间，不一定是矩形，
外轮廓是属于一种动态样式，只有元素获取到焦点或者被激活时呈现。
outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit
outline-color:定义轮廓线的颜色，属性值为CSS中定义的颜色值。在实际应用中，可以将此参数省略，省略时此参数的默认值为黑色。
outline-style:定义轮廓线的样式，属性为CSS中定义线的样式。在实际应用中，可以将此参数省略，省略时此参数的默认值为none，省略后不对该轮廓线进行任何绘制。
outline-width:定义轮廓线的宽度，属性值可以为一个宽度值。在实际应用中，可以将此参数省略，省略时此参数的默认值为medium，表示绘制中等宽度的轮廓线。
outline-offset:定义轮廓边框的偏移位置的数值，此值可以取负数值。当此参数的值为正数值，表示轮廓边框向外偏离多少个像素；当此参数的值为负数值，表示轮廓边框向内偏移多少个像素。
inherit:元素继承父元素的outline效果。*/
.outline {
  padding: 20px;
  margin: 30px;
  outline: red solid 2px;
  border: 2px solid green;
}



/*------------------------------------------------案例分割线之【12-3 CSS生成内容】----------------------------------------------*/
/*进入CSS3进代之后我们可以通过CSS3的伪类“:before”，“:after”和CSS3的伪元素“::before”、“::after”来实现，其关键是依靠CSS3中的“content”属性来实现。
不过这个属性对于img和input元素不起作用。

content配合CSS的伪类或者伪元素，一般可以做以下四件事情：
none:不生成任何内容
attr:插入标签属性值
url:使用指定的绝对或相对地址插入一个外部资源（图像，声频，视频或浏览器支持的其他任何资源）
string:插入字符串

插入元素属性值的方法:
<a href="##" title="我是一个title属性值，我插在你的后面">我是元素</a>
可以通过”:after”和”content:attr(title)”将元素的”title”值插入到元素内容“我是元素”之后：
a:after {
  content:attr(title);
       color:#f00;
}*/

h2:before{
	content:"我是刚加入的";
	color:red;
}




/*------------------------------------------------案例分割线之【12-4 制作3D旋转视频展示区】----------------------------------------------*/
案例：3D旋转导航2.html
	</style>
	</head>*/
